name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-plugin:
    name: Build x64dbg Plugin
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.27.x'

    - name: Download x64dbg Plugin SDK
      shell: pwsh
      run: |
        Write-Host "Fetching latest x64dbg release info..."
        $release = Invoke-RestMethod -Uri "https://api.github.com/repos/x64dbg/x64dbg/releases/latest"

        Write-Host "Latest release: $($release.tag_name)"
        $sdkAsset = $release.assets | Where-Object { $_.name -eq "x64dbg-pluginsdk.zip" }

        if (-not $sdkAsset) {
            Write-Error "x64dbg-pluginsdk.zip not found in latest release"
            exit 1
        }

        Write-Host "Downloading official x64dbg plugin SDK ($(($sdkAsset.size / 1KB).ToString('F2')) KB)..."
        Invoke-WebRequest -Uri $sdkAsset.browser_download_url -OutFile sdk.zip

        Write-Host "Creating SDK directory..."
        New-Item -ItemType Directory -Force -Path extern/x64dbg_sdk/pluginsdk

        Write-Host "Extracting SDK..."
        Expand-Archive -Path sdk.zip -DestinationPath extern/x64dbg_sdk/pluginsdk -Force

        Write-Host "SDK ready at: extern/x64dbg_sdk/pluginsdk"
        Get-ChildItem extern/x64dbg_sdk/pluginsdk | Select-Object -First 10

    - name: Build x64 Plugin
      shell: pwsh
      run: |
        Write-Host "Building 64-bit plugin..."
        $sdkPath = "$env:GITHUB_WORKSPACE/extern/x64dbg_sdk"
        cd src/engines/dynamic/x64dbg/plugin

        New-Item -ItemType Directory -Force -Path build-x64
        cd build-x64

        cmake .. -G "Visual Studio 17 2022" -A x64 `
          -DX64DBG_SDK_PATH="$sdkPath" `
          -DCMAKE_BUILD_TYPE=Release

        cmake --build . --config Release

        Write-Host "x64 plugin built successfully"

    - name: Build x32 Plugin
      shell: pwsh
      run: |
        Write-Host "Building 32-bit plugin..."
        $sdkPath = "$env:GITHUB_WORKSPACE/extern/x64dbg_sdk"
        cd src/engines/dynamic/x64dbg/plugin

        New-Item -ItemType Directory -Force -Path build-x32
        cd build-x32

        cmake .. -G "Visual Studio 17 2022" -A Win32 `
          -DX64DBG_SDK_PATH="$sdkPath" `
          -DCMAKE_BUILD_TYPE=Release

        cmake --build . --config Release

        Write-Host "x32 plugin built successfully"

    - name: Prepare Release Artifacts
      shell: pwsh
      run: |
        Write-Host "Preparing release artifacts..."
        New-Item -ItemType Directory -Force -Path release/x64dbg-plugins

        Copy-Item src/engines/dynamic/x64dbg/plugin/build-x64/Release/x64dbg_mcp.dpx64 release/x64dbg-plugins/
        Copy-Item src/engines/dynamic/x64dbg/plugin/build-x32/Release/x64dbg_mcp.dpx32 release/x64dbg-plugins/

        Write-Host "Artifacts prepared in release/x64dbg-plugins/"
        Get-ChildItem release/x64dbg-plugins/

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: x64dbg-plugins
        path: release/*

  create-release:
    name: Create GitHub Release
    needs: build-plugin
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: x64dbg-plugins
        path: release/

    - name: Extract Version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create Release Package
      run: |
        echo "Creating release package structure..."

        # Create package directory with version name
        PACKAGE_NAME="binary-mcp-${{ steps.version.outputs.version }}"
        mkdir -p "$PACKAGE_NAME"

        # Copy source code (excluding unnecessary files)
        rsync -av --progress \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='.venv' \
          --exclude='node_modules' \
          --exclude='.DS_Store' \
          --exclude='*.swp' \
          --exclude='.claude' \
          --exclude='release' \
          --exclude='CODE_OF_CONDUCT.md' \
          --exclude='RELEASING.md' \
          --exclude='SECURITY.md' \
          . "$PACKAGE_NAME/"

        # Copy x64dbg plugins to dedicated directory
        mkdir -p "$PACKAGE_NAME/x64dbg-plugins"
        cp release/x64dbg-plugins/x64dbg_mcp.dpx64 "$PACKAGE_NAME/x64dbg-plugins/"
        cp release/x64dbg-plugins/x64dbg_mcp.dpx32 "$PACKAGE_NAME/x64dbg-plugins/"

        # Create installation instructions for plugins
        cat > "$PACKAGE_NAME/x64dbg-plugins/README.md" << 'EOF'
        # x64dbg Plugin Installation

        Copy the plugin files to your x64dbg installation:

        - `x64dbg_mcp.dpx64` → `x64dbg/x64/plugins/`
        - `x64dbg_mcp.dpx32` → `x64dbg/x32/plugins/`

        Then restart x64dbg.
        EOF

        # Create the release zip
        zip -r "${PACKAGE_NAME}.zip" "$PACKAGE_NAME"

        echo "Release package created: ${PACKAGE_NAME}.zip"
        ls -lh "${PACKAGE_NAME}.zip"

    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'NOTES_EOF'
        ## Binary MCP Server Release

        ### Complete Package

        This release includes everything you need:
        - **MCP Server source code** - Full binary analysis server
        - **Pre-built x64dbg plugins** - Ready-to-use debugger plugins in `x64dbg-plugins/` directory
          - `x64dbg_mcp.dpx64` - 64-bit debugger plugin
          - `x64dbg_mcp.dpx32` - 32-bit debugger plugin

        ### Installation

        **Option 1: Quick Install (Recommended)**
        ```bash
        # Windows
        irm https://raw.githubusercontent.com/Sarks0/binary-mcp/main/install.ps1 | iex

        # Linux/macOS
        curl -fsSL https://raw.githubusercontent.com/Sarks0/binary-mcp/main/install.py | python3 -
        ```

        **Option 2: Manual Installation**
        1. Download and extract `binary-mcp-${{ steps.version.outputs.version }}.zip`
        2. Follow instructions in `INSTALL.md`
        3. For x64dbg plugins, see `x64dbg-plugins/README.md`

        ### Features

        **Static Analysis (Ghidra):**
        - 15+ analysis tools
        - Function decompilation
        - API call detection
        - Crypto constant identification

        **Dynamic Analysis (x64dbg):**
        - Live debugging control
        - Breakpoint management
        - Memory inspection
        - Execution tracing

        ### Requirements

        - Python 3.12+
        - Java 21+ (for Ghidra)
        - Ghidra (auto-detected or set GHIDRA_HOME)
        - x64dbg (optional, for dynamic analysis on Windows)

        ### Documentation

        - [Installation Guide](https://github.com/Sarks0/binary-mcp/blob/main/INSTALL.md)
        - [README](https://github.com/Sarks0/binary-mcp/blob/main/README.md)
        NOTES_EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          binary-mcp-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
